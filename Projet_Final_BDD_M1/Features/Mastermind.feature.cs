// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Projet_Final_BDD_M1.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Mastermind")]
    public partial class MastermindFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Mastermind.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Mastermind", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Start game with default parameters")]
        public virtual void StartGameWithDefaultParameters()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start game with default parameters", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("the game starts with default parameters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.Then("the game is started correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 7
 testRunner.And("the number of attempts left is 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Start game with valid custom combination")]
        public virtual void StartGameWithValidCustomCombination()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start game with valid custom combination", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table8.AddRow(new string[] {
                            "Red"});
                table8.AddRow(new string[] {
                            "Green"});
                table8.AddRow(new string[] {
                            "Blue"});
                table8.AddRow(new string[] {
                            "White"});
#line 11
 testRunner.Given("the game starts with custom combination:", ((string)(null)), table8, "Given ");
#line hidden
#line 17
 testRunner.Then("the game is started correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 18
 testRunner.And("the number of attempts left is 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Start game with more than 0 attempts")]
        public virtual void StartGameWithMoreThan0Attempts()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start game with more than 0 attempts", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
 testRunner.Given("the game starts with 1 attempts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 23
 testRunner.Then("the game is started correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
 testRunner.And("the number of attempts left is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Start game with 0 attempts")]
        public virtual void StartGameWith0Attempts()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start game with 0 attempts", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 28
 testRunner.Given("the game starts with 0 attempts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 29
 testRunner.Then("the invalid attempts number error is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Start game with less than 0 attempts")]
        public virtual void StartGameWithLessThan0Attempts()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start game with less than 0 attempts", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 33
 testRunner.Given("the game starts with -1 attempts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 34
 testRunner.Then("the invalid attempts number error is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Start game with invalid custom combination (length)")]
        public virtual void StartGameWithInvalidCustomCombinationLength()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start game with invalid custom combination (length)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table9.AddRow(new string[] {
                            "Red"});
                table9.AddRow(new string[] {
                            "Green"});
                table9.AddRow(new string[] {
                            "Blue"});
                table9.AddRow(new string[] {
                            "White"});
                table9.AddRow(new string[] {
                            "Yellow"});
#line 38
 testRunner.Given("the game starts with custom combination:", ((string)(null)), table9, "Given ");
#line hidden
#line 45
 testRunner.Then("the invalid combination error is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Start game with invalid custom combination (duplicate color)")]
        public virtual void StartGameWithInvalidCustomCombinationDuplicateColor()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start game with invalid custom combination (duplicate color)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table10.AddRow(new string[] {
                            "Red"});
                table10.AddRow(new string[] {
                            "Green"});
                table10.AddRow(new string[] {
                            "White"});
                table10.AddRow(new string[] {
                            "White"});
#line 49
 testRunner.Given("the game starts with custom combination:", ((string)(null)), table10, "Given ");
#line hidden
#line 55
 testRunner.Then("the invalid combination error is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Start game with invalid custom combination (invalid color)")]
        public virtual void StartGameWithInvalidCustomCombinationInvalidColor()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start game with invalid custom combination (invalid color)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table11.AddRow(new string[] {
                            "Red"});
                table11.AddRow(new string[] {
                            "Green"});
                table11.AddRow(new string[] {
                            "White"});
                table11.AddRow(new string[] {
                            "Indigo"});
#line 59
 testRunner.Given("the game starts with custom combination:", ((string)(null)), table11, "Given ");
#line hidden
#line 65
 testRunner.Then("the invalid combination error is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Start game and add invalid guess (length)")]
        public virtual void StartGameAndAddInvalidGuessLength()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start game and add invalid guess (length)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 69
 testRunner.Given("the game starts with default parameters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 70
 testRunner.Then("the game is started correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table12.AddRow(new string[] {
                            "Red"});
                table12.AddRow(new string[] {
                            "Red"});
                table12.AddRow(new string[] {
                            "Blue"});
#line 71
 testRunner.Given("the player adds the guess:", ((string)(null)), table12, "Given ");
#line hidden
#line 76
 testRunner.Then("the invalid combination error is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Start game and add invalid guess (duplicate color)")]
        public virtual void StartGameAndAddInvalidGuessDuplicateColor()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start game and add invalid guess (duplicate color)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 79
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 80
 testRunner.Given("the game starts with default parameters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 81
 testRunner.Then("the game is started correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table13.AddRow(new string[] {
                            "Red"});
                table13.AddRow(new string[] {
                            "Red"});
                table13.AddRow(new string[] {
                            "Blue"});
                table13.AddRow(new string[] {
                            "White"});
#line 82
 testRunner.Given("the player adds the guess:", ((string)(null)), table13, "Given ");
#line hidden
#line 88
 testRunner.Then("the invalid combination error is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Start game and add invalid guess (invalid color)")]
        public virtual void StartGameAndAddInvalidGuessInvalidColor()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start game and add invalid guess (invalid color)", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 91
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 92
 testRunner.Given("the game starts with default parameters", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 93
 testRunner.Then("the game is started correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table14.AddRow(new string[] {
                            "Red"});
                table14.AddRow(new string[] {
                            "Green"});
                table14.AddRow(new string[] {
                            "Blue"});
                table14.AddRow(new string[] {
                            "Black"});
#line 94
 testRunner.Given("the player adds the guess:", ((string)(null)), table14, "Given ");
#line hidden
#line 100
 testRunner.Then("the invalid combination error is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Start game and find custom combination on first attempt")]
        public virtual void StartGameAndFindCustomCombinationOnFirstAttempt()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start game and find custom combination on first attempt", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 103
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table15.AddRow(new string[] {
                            "Red"});
                table15.AddRow(new string[] {
                            "Green"});
                table15.AddRow(new string[] {
                            "Blue"});
                table15.AddRow(new string[] {
                            "White"});
#line 104
 testRunner.Given("the game starts with custom combination:", ((string)(null)), table15, "Given ");
#line hidden
#line 110
 testRunner.Then("the game is started correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table16.AddRow(new string[] {
                            "Red"});
                table16.AddRow(new string[] {
                            "Green"});
                table16.AddRow(new string[] {
                            "Blue"});
                table16.AddRow(new string[] {
                            "White"});
#line 111
 testRunner.Given("the player adds the guess:", ((string)(null)), table16, "Given ");
#line hidden
#line 117
 testRunner.Then("the game ends on a victory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding a guess without starting a game")]
        public virtual void AddingAGuessWithoutStartingAGame()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding a guess without starting a game", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 120
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table17.AddRow(new string[] {
                            "Red"});
                table17.AddRow(new string[] {
                            "Green"});
                table17.AddRow(new string[] {
                            "Blue"});
                table17.AddRow(new string[] {
                            "White"});
#line 121
 testRunner.Given("the player adds the guess:", ((string)(null)), table17, "Given ");
#line hidden
#line 127
 testRunner.Then("the game not in progress error is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Start and win game then add another attempt")]
        public virtual void StartAndWinGameThenAddAnotherAttempt()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start and win game then add another attempt", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 130
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table18.AddRow(new string[] {
                            "Red"});
                table18.AddRow(new string[] {
                            "Green"});
                table18.AddRow(new string[] {
                            "Blue"});
                table18.AddRow(new string[] {
                            "White"});
#line 131
 testRunner.Given("the game starts with custom combination:", ((string)(null)), table18, "Given ");
#line hidden
#line 137
 testRunner.Then("the game is started correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table19.AddRow(new string[] {
                            "Red"});
                table19.AddRow(new string[] {
                            "Green"});
                table19.AddRow(new string[] {
                            "Blue"});
                table19.AddRow(new string[] {
                            "White"});
#line 138
 testRunner.Given("the player adds the guess:", ((string)(null)), table19, "Given ");
#line hidden
#line 144
 testRunner.Then("the game ends on a victory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table20.AddRow(new string[] {
                            "Red"});
                table20.AddRow(new string[] {
                            "Green"});
                table20.AddRow(new string[] {
                            "Blue"});
                table20.AddRow(new string[] {
                            "White"});
#line 145
 testRunner.Given("the player adds the guess:", ((string)(null)), table20, "Given ");
#line hidden
#line 151
 testRunner.Then("the game not in progress error is thrown", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Start game and find custom combination on third attempts")]
        public virtual void StartGameAndFindCustomCombinationOnThirdAttempts()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start game and find custom combination on third attempts", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 154
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table21.AddRow(new string[] {
                            "Red"});
                table21.AddRow(new string[] {
                            "Green"});
                table21.AddRow(new string[] {
                            "Blue"});
                table21.AddRow(new string[] {
                            "White"});
#line 155
 testRunner.Given("the game starts with custom combination:", ((string)(null)), table21, "Given ");
#line hidden
#line 161
 testRunner.Then("the game is started correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table22.AddRow(new string[] {
                            "Red"});
                table22.AddRow(new string[] {
                            "Pink"});
                table22.AddRow(new string[] {
                            "White"});
                table22.AddRow(new string[] {
                            "Orange"});
#line 162
 testRunner.Given("the player adds the guess:", ((string)(null)), table22, "Given ");
#line hidden
#line 168
 testRunner.Then("the number of red indicators is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 169
 testRunner.And("the number of white indicators is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 170
 testRunner.And("the number of attempts left is 9", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table23.AddRow(new string[] {
                            "Red"});
                table23.AddRow(new string[] {
                            "White"});
                table23.AddRow(new string[] {
                            "Blue"});
                table23.AddRow(new string[] {
                            "Green"});
#line 171
 testRunner.Given("the player adds the guess:", ((string)(null)), table23, "Given ");
#line hidden
#line 177
 testRunner.Then("the number of red indicators is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 178
 testRunner.And("the number of white indicators is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 179
 testRunner.And("the number of attempts left is 8", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table24.AddRow(new string[] {
                            "Red"});
                table24.AddRow(new string[] {
                            "Green"});
                table24.AddRow(new string[] {
                            "Blue"});
                table24.AddRow(new string[] {
                            "White"});
#line 180
 testRunner.Given("the player adds the guess:", ((string)(null)), table24, "Given ");
#line hidden
#line 186
 testRunner.Then("the game ends on a victory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Start game with default 10 attempts and lose")]
        public virtual void StartGameWithDefault10AttemptsAndLose()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start game with default 10 attempts and lose", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 189
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table25.AddRow(new string[] {
                            "Red"});
                table25.AddRow(new string[] {
                            "Green"});
                table25.AddRow(new string[] {
                            "Blue"});
                table25.AddRow(new string[] {
                            "White"});
#line 190
 testRunner.Given("the game starts with custom combination:", ((string)(null)), table25, "Given ");
#line hidden
#line 196
 testRunner.Then("the game is started correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 197
 testRunner.And("the number of attempts left is 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table26.AddRow(new string[] {
                            "Pink"});
                table26.AddRow(new string[] {
                            "Purple"});
                table26.AddRow(new string[] {
                            "Orange"});
                table26.AddRow(new string[] {
                            "Yellow"});
#line 198
 testRunner.Given("the player adds the guess:", ((string)(null)), table26, "Given ");
#line hidden
#line 204
 testRunner.Then("the number of red indicators is 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 205
 testRunner.And("the number of white indicators is 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 206
 testRunner.And("the number of attempts left is 9", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table27.AddRow(new string[] {
                            "Red"});
                table27.AddRow(new string[] {
                            "Purple"});
                table27.AddRow(new string[] {
                            "Orange"});
                table27.AddRow(new string[] {
                            "Yellow"});
#line 207
 testRunner.Given("the player adds the guess:", ((string)(null)), table27, "Given ");
#line hidden
#line 213
 testRunner.Then("the number of red indicators is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 214
 testRunner.And("the number of white indicators is 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 215
 testRunner.And("the number of attempts left is 8", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table28.AddRow(new string[] {
                            "Red"});
                table28.AddRow(new string[] {
                            "White"});
                table28.AddRow(new string[] {
                            "Orange"});
                table28.AddRow(new string[] {
                            "Yellow"});
#line 216
 testRunner.Given("the player adds the guess:", ((string)(null)), table28, "Given ");
#line hidden
#line 222
 testRunner.Then("the number of red indicators is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 223
 testRunner.And("the number of white indicators is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 224
 testRunner.And("the number of attempts left is 7", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table29.AddRow(new string[] {
                            "Red"});
                table29.AddRow(new string[] {
                            "Green"});
                table29.AddRow(new string[] {
                            "Orange"});
                table29.AddRow(new string[] {
                            "Yellow"});
#line 225
 testRunner.Given("the player adds the guess:", ((string)(null)), table29, "Given ");
#line hidden
#line 231
 testRunner.Then("the number of red indicators is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 232
 testRunner.And("the number of white indicators is 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 233
 testRunner.And("the number of attempts left is 6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table30.AddRow(new string[] {
                            "Red"});
                table30.AddRow(new string[] {
                            "Green"});
                table30.AddRow(new string[] {
                            "White"});
                table30.AddRow(new string[] {
                            "Yellow"});
#line 234
 testRunner.Given("the player adds the guess:", ((string)(null)), table30, "Given ");
#line hidden
#line 240
 testRunner.Then("the number of red indicators is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 241
 testRunner.And("the number of white indicators is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 242
 testRunner.And("the number of attempts left is 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table31.AddRow(new string[] {
                            "Red"});
                table31.AddRow(new string[] {
                            "Green"});
                table31.AddRow(new string[] {
                            "Purple"});
                table31.AddRow(new string[] {
                            "White"});
#line 243
 testRunner.Given("the player adds the guess:", ((string)(null)), table31, "Given ");
#line hidden
#line 249
 testRunner.Then("the number of red indicators is 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 250
 testRunner.And("the number of white indicators is 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 251
 testRunner.And("the number of attempts left is 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table32.AddRow(new string[] {
                            "White"});
                table32.AddRow(new string[] {
                            "Purple"});
                table32.AddRow(new string[] {
                            "Orange"});
                table32.AddRow(new string[] {
                            "Yellow"});
#line 252
 testRunner.Given("the player adds the guess:", ((string)(null)), table32, "Given ");
#line hidden
#line 258
 testRunner.Then("the number of red indicators is 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 259
 testRunner.And("the number of white indicators is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 260
 testRunner.And("the number of attempts left is 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table33.AddRow(new string[] {
                            "White"});
                table33.AddRow(new string[] {
                            "Red"});
                table33.AddRow(new string[] {
                            "Orange"});
                table33.AddRow(new string[] {
                            "Yellow"});
#line 261
 testRunner.Given("the player adds the guess:", ((string)(null)), table33, "Given ");
#line hidden
#line 267
 testRunner.Then("the number of red indicators is 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 268
 testRunner.And("the number of white indicators is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 269
 testRunner.And("the number of attempts left is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table34.AddRow(new string[] {
                            "White"});
                table34.AddRow(new string[] {
                            "Red"});
                table34.AddRow(new string[] {
                            "Green"});
                table34.AddRow(new string[] {
                            "Yellow"});
#line 270
 testRunner.Given("the player adds the guess:", ((string)(null)), table34, "Given ");
#line hidden
#line 276
 testRunner.Then("the number of red indicators is 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 277
 testRunner.And("the number of white indicators is 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 278
 testRunner.And("the number of attempts left is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table35.AddRow(new string[] {
                            "White"});
                table35.AddRow(new string[] {
                            "Red"});
                table35.AddRow(new string[] {
                            "Green"});
                table35.AddRow(new string[] {
                            "Blue"});
#line 279
 testRunner.Given("the player adds the guess:", ((string)(null)), table35, "Given ");
#line hidden
#line 285
 testRunner.Then("the number of red indicators is 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 286
 testRunner.And("the number of white indicators is 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 287
 testRunner.And("the game is lost", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Start game with 8 attempts and lose")]
        public virtual void StartGameWith8AttemptsAndLose()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start game with 8 attempts and lose", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 290
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table36.AddRow(new string[] {
                            "Red"});
                table36.AddRow(new string[] {
                            "Green"});
                table36.AddRow(new string[] {
                            "Blue"});
                table36.AddRow(new string[] {
                            "White"});
#line 291
 testRunner.Given("the game starts with 8 attempts and custom combination:", ((string)(null)), table36, "Given ");
#line hidden
#line 297
 testRunner.Then("the game is started correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 298
 testRunner.And("the number of attempts left is 8", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table37.AddRow(new string[] {
                            "Red"});
                table37.AddRow(new string[] {
                            "Green"});
                table37.AddRow(new string[] {
                            "Blue"});
                table37.AddRow(new string[] {
                            "White"});
#line 299
 testRunner.Given("the player adds 8 wrong guesses for combination:", ((string)(null)), table37, "Given ");
#line hidden
#line 305
 testRunner.Then("the game is lost", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Start game with 12 attempts and lose")]
        public virtual void StartGameWith12AttemptsAndLose()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start game with 12 attempts and lose", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 308
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table38.AddRow(new string[] {
                            "Red"});
                table38.AddRow(new string[] {
                            "Green"});
                table38.AddRow(new string[] {
                            "Blue"});
                table38.AddRow(new string[] {
                            "White"});
#line 309
 testRunner.Given("the game starts with 12 attempts and custom combination:", ((string)(null)), table38, "Given ");
#line hidden
#line 315
 testRunner.Then("the game is started correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 316
 testRunner.And("the number of attempts left is 12", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table39.AddRow(new string[] {
                            "Red"});
                table39.AddRow(new string[] {
                            "Green"});
                table39.AddRow(new string[] {
                            "Blue"});
                table39.AddRow(new string[] {
                            "White"});
#line 317
 testRunner.Given("the player adds 10 wrong guesses for combination:", ((string)(null)), table39, "Given ");
#line hidden
#line 323
 testRunner.Then("the number of attempts left is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table40.AddRow(new string[] {
                            "Pink"});
                table40.AddRow(new string[] {
                            "Purple"});
                table40.AddRow(new string[] {
                            "Orange"});
                table40.AddRow(new string[] {
                            "Yellow"});
#line 324
 testRunner.Given("the player adds the guess:", ((string)(null)), table40, "Given ");
#line hidden
#line 330
 testRunner.Then("the number of red indicators is 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 331
 testRunner.And("the number of white indicators is 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 332
 testRunner.And("the number of attempts left is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table41.AddRow(new string[] {
                            "Blue"});
                table41.AddRow(new string[] {
                            "Green"});
                table41.AddRow(new string[] {
                            "White"});
                table41.AddRow(new string[] {
                            "Yellow"});
#line 333
 testRunner.Given("the player adds the guess:", ((string)(null)), table41, "Given ");
#line hidden
#line 339
 testRunner.Then("the number of red indicators is 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 340
 testRunner.And("the number of white indicators is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 341
 testRunner.And("the game is lost", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Start game with 12 attempts and win on 11th attempts")]
        public virtual void StartGameWith12AttemptsAndWinOn11ThAttempts()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start game with 12 attempts and win on 11th attempts", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 344
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table42.AddRow(new string[] {
                            "Red"});
                table42.AddRow(new string[] {
                            "Green"});
                table42.AddRow(new string[] {
                            "Blue"});
                table42.AddRow(new string[] {
                            "White"});
#line 345
 testRunner.Given("the game starts with 12 attempts and custom combination:", ((string)(null)), table42, "Given ");
#line hidden
#line 351
 testRunner.Then("the game is started correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 352
 testRunner.And("the number of attempts left is 12", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table43.AddRow(new string[] {
                            "Red"});
                table43.AddRow(new string[] {
                            "Green"});
                table43.AddRow(new string[] {
                            "Blue"});
                table43.AddRow(new string[] {
                            "White"});
#line 353
 testRunner.Given("the player adds 10 wrong guesses for combination:", ((string)(null)), table43, "Given ");
#line hidden
#line 359
 testRunner.Then("the number of attempts left is 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                            "Colors"});
                table44.AddRow(new string[] {
                            "Red"});
                table44.AddRow(new string[] {
                            "Green"});
                table44.AddRow(new string[] {
                            "Blue"});
                table44.AddRow(new string[] {
                            "White"});
#line 360
 testRunner.Given("the player adds the guess:", ((string)(null)), table44, "Given ");
#line hidden
#line 366
 testRunner.Then("the game ends on a victory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
